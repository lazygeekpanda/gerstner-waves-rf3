{"version":3,"file":"static/js/335.4ad6e403.chunk.js","mappings":"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","sources":["styles/colors.ts","components/layout/PageContent/PageContent.styled.ts","components/layout/PageContent/PageContent.tsx","components/three/Canvas/Canvas.styled.ts","components/three/Canvas/Canvas.tsx","components/three/Sky/Sky.tsx","components/three/Loader/FBXLoader.tsx","components/three/Vessel/Vessel.tsx","components/three/Water/GerstnerWater.tsx","components/three/Water/utils/vertex.shader.js","components/three/Water/utils/fragment.shader.js","contexts/water.context.tsx","pages/Playground/Playground.tsx","assets/models|sync|/^/.*$"],"sourcesContent":["const colors = {\r\n  black: '#0C0F13',\r\n  accent: '#F5B82E',\r\n  bg: '#f5f5f5'\r\n}\r\n\r\nexport default colors","import styled from 'styled-components'\r\n\r\nimport colors from 'styles/colors'\r\n\r\nexport const Wrapper = styled.div`\r\n  height: 100vh;\r\n  background-color: ${colors.bg};\r\n\r\n  overflow: hidden;\r\n`","import * as React from 'react';\r\n\r\nimport * as styled from './PageContent.styled'\r\n\r\nconst PageContent: React.FC = ({ children }) => (\r\n  <styled.Wrapper>\r\n    {children}\r\n  </styled.Wrapper>\r\n)\r\n\r\nexport default PageContent","import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  background-color: #f5f5f5;\r\n`","import * as React from 'react'\r\nimport { Canvas as R3FCanvas } from '@react-three/fiber'\r\nimport { OrbitControls } from '@react-three/drei'\r\nimport Stats from 'components/three/Stats'\r\n\r\nimport * as styled from './Canvas.styled'\r\n\r\nconst Canvas: React.FC = ({ children }) => (\r\n  <styled.Wrapper>\r\n    <R3FCanvas camera={{ position: [75, 25, 25] }}>\r\n      <OrbitControls\r\n        // Zoom limits\r\n        minDistance={15}\r\n        maxDistance={150}\r\n        // Disable camera below surface\r\n        maxPolarAngle={Math.PI / 2.5}\r\n      />\r\n      {children}\r\n      {process.env.NODE_ENV !== 'production' ? <Stats /> : null}\r\n    </R3FCanvas>\r\n  </styled.Wrapper>\r\n)\r\n\r\nexport default Canvas\r\n","import { memo } from 'react'\r\nimport { Sky } from '@react-three/drei'\r\n\r\nconst SkyObject = () => {\r\n  return (\r\n    <>\r\n      <Sky\r\n        distance={450000}\r\n        sunPosition={[1000, 1000, 8000]}\r\n        inclination={10}\r\n        turbidity={0.5}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(SkyObject)\r\n","import React, { forwardRef, memo } from 'react'\r\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader'\r\nimport { useLoader } from '@react-three/fiber'\r\n\r\ninterface Props {\r\n  ref: any\r\n  model: string\r\n\r\n  scale?: number[]\r\n  position?: number[]\r\n  rotation?: number[]\r\n}\r\n\r\nconst FBXModelLoader: React.FC<Props> = forwardRef(({ model, ...props }, ref) => {\r\n  const obj = useLoader(FBXLoader, require(`assets/models/${model}`))\r\n\r\n  // @ts-ignore\r\n  return <primitive ref={ref} object={obj} {...props} />\r\n})\r\n\r\nexport default memo(FBXModelLoader)","import React from 'react'\r\n\r\nimport * as THREE from 'three'\r\nimport FBXModelLoader from 'components/three/Loader/FBXLoader'\r\nimport { useFrame } from '@react-three/fiber'\r\n\r\ninterface Props {\r\n  getWaveInfo: (x: any, y: any, time: any) => THREE.Vector3\r\n}\r\n\r\nconst MARKER_Z_OFFSET = 256\r\n\r\nconst Vessel: React.FC<Props> = ({ getWaveInfo }) => {\r\n  const ref = React.useRef<THREE.Mesh>()\r\n  const frontRef = React.useRef<THREE.Mesh>()\r\n\r\n  useFrame(({ clock }) => {\r\n    const vesselPosition = getWaveInfo(0, 0, clock.getElapsedTime())\r\n    const markerPosition = getWaveInfo(0, 256, clock.getElapsedTime())\r\n\r\n    if (ref?.current && frontRef?.current) {\r\n      frontRef.current.position.set(\r\n        -markerPosition.x * 1.15,\r\n        markerPosition.y,\r\n        MARKER_Z_OFFSET\r\n      )\r\n\r\n      ref.current.position.set(\r\n        vesselPosition.x,\r\n        vesselPosition.y + 7,\r\n        vesselPosition.z\r\n      )\r\n\r\n      // @ts-ignore\r\n      ref.current.lookAt(frontRef.current.position)\r\n    }\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <mesh ref={frontRef}>\r\n        <planeBufferGeometry args={[256, 256]} />\r\n        <meshStandardMaterial opacity={0} transparent />\r\n      </mesh>\r\n\r\n      <FBXModelLoader ref={ref} model=\"ship.fbx\" scale={[0.5, 0.5, 0.5]} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Vessel\r\n","import React, { useRef, useEffect, useMemo, useCallback } from 'react'\r\n\r\nimport * as THREE from 'three'\r\nimport {\r\n  extend,\r\n  useThree,\r\n  useLoader,\r\n  useFrame,\r\n  Object3DNode,\r\n} from '@react-three/fiber'\r\nimport { Water } from 'three/examples/jsm/objects/Water.js'\r\n\r\nimport vertexShader from './utils/vertex.shader'\r\nimport fragmentShader from './utils/fragment.shader'\r\n\r\nimport { Wave } from 'models/wave.model'\r\n\r\nextend({ Water })\r\n\r\ndeclare global {\r\n  namespace JSX {\r\n    interface IntrinsicElements {\r\n      water: Object3DNode<Water, typeof Water>\r\n    }\r\n  }\r\n}\r\n\r\ninterface Props {\r\n  wireframe: boolean\r\n  size: number\r\n  waveA: Wave\r\n  waveB: Wave\r\n  waveC: Wave\r\n}\r\n\r\nconst GerstnerWater: React.FC<Props> = ({\r\n  wireframe,\r\n  size,\r\n  waveA,\r\n  waveB,\r\n  waveC,\r\n}) => {\r\n  const ref = useRef<Water>()\r\n  const gl = useThree<THREE.WebGLRenderer>((state) => state.gl)\r\n\r\n  const waterNormals = useLoader(\r\n    THREE.TextureLoader,\r\n    require('assets/maps/waternormals.jpg')\r\n  ) as any\r\n  waterNormals.wrapS = waterNormals.wrapT = THREE.RepeatWrapping\r\n\r\n  const onBeforeCompile = useCallback(\r\n    (shader: any) => {\r\n      shader.uniforms.waveA = {\r\n        value: [\r\n          Math.sin((waveA.direction * Math.PI) / 180),\r\n          Math.cos((waveA.direction * Math.PI) / 180),\r\n          waveA.steepness,\r\n          waveA.wavelength,\r\n        ],\r\n      }\r\n\r\n      shader.uniforms.waveB = {\r\n        value: [\r\n          Math.sin((waveB.direction * Math.PI) / 180),\r\n          Math.cos((waveB.direction * Math.PI) / 180),\r\n          waveB.steepness,\r\n          waveB.wavelength,\r\n        ],\r\n      }\r\n\r\n      shader.uniforms.waveC = {\r\n        value: [\r\n          Math.sin((waveC.direction * Math.PI) / 180),\r\n          Math.cos((waveC.direction * Math.PI) / 180),\r\n          waveC.steepness,\r\n          waveC.wavelength,\r\n        ],\r\n      }\r\n\r\n      shader.vertexShader = vertexShader\r\n      shader.fragmentShader = fragmentShader\r\n\r\n      shader.uniforms.size.value = 0\r\n    },\r\n    [waveA, waveB, waveC]\r\n  )\r\n\r\n  // Plane Geometry\r\n  const geometry = useMemo(\r\n    () => new THREE.PlaneGeometry(size, size, size / 4, size / 4),\r\n    [size]\r\n  )\r\n\r\n  // Water Mesh Config\r\n  const config = useMemo(\r\n    () => ({\r\n      textureWidth: 256,\r\n      textureHeight: 256,\r\n      waterNormals,\r\n      sunDirection: new THREE.Vector3(),\r\n      side: THREE.DoubleSide,\r\n      waterColor: '#102E4A',\r\n      sunColor: '#eb8934',\r\n      distortionScale: 8,\r\n      fog: undefined,\r\n      format: gl.outputEncoding,\r\n\r\n      onBeforeCompile,\r\n    }),\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [waterNormals, waveA, waveB, waveC]\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!ref.current) {\r\n      return\r\n    }\r\n\r\n    // @ts-ignore\r\n    const material = ref.current.material as THREE.ShaderMaterial\r\n    material.wireframe = wireframe\r\n  }, [size, wireframe, waveA, waveB, waveC])\r\n\r\n  // Animate water\r\n  useFrame(({ clock }) => {\r\n    if (!ref.current) {\r\n      return\r\n    }\r\n\r\n    // @ts-ignore\r\n    const material = ref.current.material as THREE.ShaderMaterial\r\n    material.uniforms.time.value = clock.getElapsedTime()\r\n    material.onBeforeCompile = onBeforeCompile\r\n  })\r\n\r\n  return (\r\n    <water\r\n      ref={ref}\r\n      args={[geometry, { ...config }]}\r\n      rotation-x={-Math.PI / 2}\r\n      position={[0, 2, 0]}\r\n    />\r\n  )\r\n}\r\n\r\nexport default GerstnerWater\r\n","const shader = `\r\nuniform mat4 textureMatrix;\r\nuniform float time;\r\n\r\nvarying vec4 mirrorCoord;\r\nvarying vec4 worldPosition;\r\n\r\n#include <common>\r\n#include <fog_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n\r\nuniform vec4 waveA;\r\nuniform vec4 waveB;\r\nuniform vec4 waveC;\r\n\r\nvec3 GerstnerWave (vec4 wave, vec3 p) {\r\n    float steepness = wave.z;\r\n    float wavelength = wave.w;\r\n    float k = 2.0 * PI / wavelength;\r\n    float c = sqrt(9.8 / k);\r\n    vec2 d = normalize(wave.xy);\r\n    float f = k * (dot(d, vec2(p.x, p.y)) - c * time);\r\n    float a = steepness / k;\r\n\r\n    return vec3(\r\n        d.x * (a * cos(f)),\r\n        d.y * (a * cos(f)),\r\n        a * sin(f)\r\n    );\r\n}\r\n\r\nvoid main() {\r\n    mirrorCoord = modelMatrix * vec4( position, 1.0 );\r\n    worldPosition = mirrorCoord.xyzw;\r\n    mirrorCoord = textureMatrix * mirrorCoord;\r\n\r\n    vec3 gridPoint = position.xyz;\r\n    vec3 tangent = vec3(1, 0, 0);\r\n    vec3 binormal = vec3(0, 0, 1);\r\n    vec3 p = gridPoint;\r\n    p += GerstnerWave(waveA, gridPoint);\r\n    p += GerstnerWave(waveB, gridPoint);\r\n    p += GerstnerWave(waveC, gridPoint);\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( p.x, p.y, p.z, 1.0);\r\n\r\n    #include <beginnormal_vertex>\r\n    #include <defaultnormal_vertex>\r\n    #include <logdepthbuf_vertex>\r\n    #include <fog_vertex>\r\n    #include <shadowmap_vertex>\r\n}\r\n`\r\n\r\nexport default shader\r\n","const shader = `\r\nuniform sampler2D mirrorSampler;\r\nuniform float alpha;\r\nuniform float time;\r\nuniform float size;\r\nuniform float distortionScale;\r\nuniform sampler2D normalSampler;\r\nuniform vec3 sunColor;\r\nuniform vec3 sunDirection;\r\nuniform vec3 eye;\r\nuniform vec3 waterColor;\r\n\r\nvarying vec4 mirrorCoord;\r\nvarying vec4 worldPosition;\r\n\r\nuniform float offsetX;\r\nuniform float offsetZ;\r\n\r\nvec4 getNoise( vec2 uv ) {\r\n    vec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);\r\n    vec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );\r\n    vec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );\r\n    vec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );\r\n    vec4 noise = texture2D( normalSampler, uv0 ) +\r\n        texture2D( normalSampler, uv1 ) +\r\n        texture2D( normalSampler, uv2 ) +\r\n        texture2D( normalSampler, uv3 );\r\n    return noise * 0.5 - 1.0;\r\n}\r\n\r\nvoid sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {\r\n    vec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );\r\n    float direction = max( 0.0, dot( eyeDirection, reflection ) );\r\n    specularColor += pow( direction, shiny ) * sunColor * spec;\r\n    diffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;\r\n}\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <bsdfs>\r\n#include <fog_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <lights_pars_begin>\r\n#include <shadowmap_pars_fragment>\r\n#include <shadowmask_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n    #include <logdepthbuf_fragment>\r\n\r\n    vec4 noise = getNoise( (worldPosition.xz) + vec2(offsetX/12.25,offsetZ/12.25) * size );\r\n    vec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );\r\n\r\n    vec3 diffuseLight = vec3(0.0);\r\n    vec3 specularLight = vec3(0.0);\r\n\r\n    vec3 worldToEye = eye-worldPosition.xyz;\r\n    vec3 eyeDirection = normalize( worldToEye );\r\n    sunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );\r\n\r\n    float distance = length(worldToEye);\r\n\r\n    vec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;\r\n    vec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );\r\n\r\n    float theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );\r\n    float rf0 = 0.3;\r\n    float reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );\r\n    vec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;\r\n    vec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);\r\n    vec3 outgoingLight = albedo;\r\n    gl_FragColor = vec4( outgoingLight, alpha );\r\n\r\n    #include <tonemapping_fragment>\r\n    #include <fog_fragment>\r\n}\r\n`\r\n\r\nexport default shader","import { useContext, createContext } from 'react'\r\n\r\nimport * as THREE from 'three'\r\nimport { useControls } from 'leva'\r\n\r\nimport { Wave } from 'models/wave.model'\r\n\r\nconst WaterContext = createContext<{\r\n  waveA: Wave\r\n  waveB: Wave\r\n  waveC: Wave\r\n  getWaveInfo: (x: any, y: any, time: any) => THREE.Vector3\r\n}>({\r\n  waveA: {\r\n    direction: 0,\r\n    steepness: 0,\r\n    wavelength: 100,\r\n  },\r\n  waveB: {\r\n    direction: 0,\r\n    steepness: 0,\r\n    wavelength: 100,\r\n  },\r\n  waveC: {\r\n    direction: 0,\r\n    steepness: 0,\r\n    wavelength: 100,\r\n  },\r\n  getWaveInfo: (x: any, y: any, time: any) => new THREE.Vector3(),\r\n})\r\n\r\nconst WaterRefProvider: React.FC = ({ children }) => {\r\n  const waveA: Wave = useControls('Wave A', {\r\n    direction: { label: 'Direction', value: 0, step: 1, min: 0, max: 359 },\r\n    steepness: { label: 'Steepness', value: 0.15, step: 0.01, min: 0, max: 1 },\r\n    wavelength: { label: 'Wave Length', value: 100, step: 1, min: 1, max: 100 },\r\n  })\r\n\r\n  const waveB: Wave = useControls('Wave B', {\r\n    direction: { label: 'Direction', value: 30, step: 1, min: 0, max: 359 },\r\n    steepness: { label: 'Steepness', value: 0.15, step: 0.01, min: 0, max: 1 },\r\n    wavelength: { label: 'Wave Length', value: 50, step: 1, min: 1, max: 100 },\r\n  })\r\n\r\n  const waveC: Wave = useControls('Wave C', {\r\n    direction: { label: 'Direction', value: 60, step: 1, min: 0, max: 359 },\r\n    steepness: { label: 'Steepness', value: 0.15, step: 0.01, min: 0, max: 1 },\r\n    wavelength: { label: 'Wave Length', value: 25, step: 1, min: 1, max: 100 },\r\n  })\r\n\r\n  const getWaveInfo = (x: any, z: any, time: any): THREE.Vector3 => {\r\n    const pos = new THREE.Vector3()\r\n    const tangent = new THREE.Vector3(1, 0, 0)\r\n    const binormal = new THREE.Vector3(0, 0, 1)\r\n\r\n    ;[waveA, waveB, waveC].forEach((w: any) => {\r\n      const k = (Math.PI * 2.0) / w.wavelength\r\n      const c = Math.sqrt(9.8 / k)\r\n      const d = new THREE.Vector2(\r\n        Math.sin((w.direction * Math.PI) / 180),\r\n        -Math.cos((w.direction * Math.PI) / 180)\r\n      )\r\n      const f = k * (d.dot(new THREE.Vector2(x, z)) - c * time)\r\n      const a = w.steepness / k\r\n\r\n      pos.x += d.x * (a * Math.cos(f))\r\n      pos.y += a * Math.sin(f)\r\n      pos.z += d.y * (a * Math.cos(f))\r\n\r\n      tangent.x += -d.x * d.x * (w.steepness * Math.sin(f))\r\n      tangent.y += d.x * (w.steepness * Math.cos(f))\r\n      tangent.z += -d.x * d.y * (w.steepness * Math.sin(f))\r\n\r\n      binormal.x += -d.x * d.y * (w.steepness * Math.sin(f))\r\n      binormal.y += d.y * (w.steepness * Math.cos(f))\r\n      binormal.z += -d.y * d.y * (w.steepness * Math.sin(f))\r\n    })\r\n\r\n    return pos\r\n  }\r\n\r\n  return (\r\n    <WaterContext.Provider\r\n      value={{\r\n        waveA,\r\n        waveB,\r\n        waveC,\r\n        getWaveInfo,\r\n      }}\r\n    >\r\n      {children}\r\n    </WaterContext.Provider>\r\n  )\r\n}\r\n\r\nconst useWaterContext = () => {\r\n  const context = useContext(WaterContext)\r\n\r\n  return context\r\n}\r\n\r\nexport { WaterRefProvider, useWaterContext }\r\n","import React from 'react'\r\nimport * as THREE from 'three'\r\nimport { useControls } from 'leva'\r\n\r\nimport PageContent from 'components/layout/PageContent'\r\nimport Canvas from 'components/three/Canvas'\r\nimport Sky from 'components/three/Sky'\r\nimport Vessel from 'components/three/Vessel'\r\nimport GerstnerWater from 'components/three/Water/GerstnerWater'\r\n\r\nimport { useWaterContext, WaterRefProvider } from 'contexts/water.context'\r\n\r\nconst PlaygroundPage: React.FC = () => {\r\n  // Water Controls\r\n  const { wireframe, size } = useControls('Water', {\r\n    size: { label: 'Water Area', value: 512, min: 64, max: 1024, step: 1 },\r\n    wireframe: { label: 'Wireframe', value: false },\r\n  })\r\n\r\n  const { waveA, waveB, waveC, getWaveInfo } = useWaterContext()\r\n\r\n  return (\r\n    <PageContent>\r\n      <Canvas>\r\n        <ambientLight intensity={0.15} position={[100, 100, 100]} />\r\n        <pointLight position={[100, 100, 100]} intensity={0.5} />\r\n        <Sky />\r\n\r\n        <Vessel getWaveInfo={getWaveInfo} />\r\n        <GerstnerWater\r\n          waveA={waveA}\r\n          waveB={waveB}\r\n          waveC={waveC}\r\n          wireframe={wireframe}\r\n          size={size}\r\n        />\r\n      </Canvas>\r\n    </PageContent>\r\n  )\r\n}\r\n\r\nconst PageWithContext: React.FC = () => (\r\n  <>\r\n    <WaterRefProvider>\r\n      <PlaygroundPage />\r\n    </WaterRefProvider>\r\n  </>\r\n)\r\n\r\nexport default PageWithContext\r\n","var map = {\n\t\"./ship.fbx\": 7611\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 7699;"],"names":["black","accent","bg","Wrapper","styled","div","_templateObject","_taggedTemplateLiteral","colors","_ref","children","_jsx","_jsxs","R3FCanvas","camera","position","OrbitControls","minDistance","maxDistance","maxPolarAngle","Math","PI","SkyObject","_Fragment","Sky","distance","sunPosition","inclination","turbidity","memo","FBXModelLoader","forwardRef","ref","model","props","_objectWithoutProperties","_excluded","obj","useLoader","FBXLoader","require","concat","_objectSpread","object","getWaveInfo","React","frontRef","useFrame","_ref2","clock","vesselPosition","getElapsedTime","markerPosition","current","set","x","y","z","lookAt","args","opacity","transparent","scale","extend","Water","wireframe","size","waveA","waveB","waveC","useRef","gl","useThree","state","waterNormals","THREE","wrapS","wrapT","onBeforeCompile","useCallback","shader","uniforms","value","sin","direction","cos","steepness","wavelength","vertexShader","fragmentShader","geometry","useMemo","config","textureWidth","textureHeight","sunDirection","side","waterColor","sunColor","distortionScale","fog","undefined","format","outputEncoding","useEffect","material","time","WaterContext","createContext","WaterRefProvider","useControls","label","step","min","max","Provider","pos","tangent","binormal","forEach","w","k","c","sqrt","d","f","dot","a","PlaygroundPage","useContext","PageContent","Canvas","intensity","Vessel","GerstnerWater","PageWithContext","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports"],"sourceRoot":""}