{"version":3,"file":"static/js/840.1d10ee80.chunk.js","mappings":"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","sources":["components/layout/PageContent/PageContent.styled.ts","components/layout/PageContent/PageContent.tsx","components/three/Controls/Controls.tsx","components/three/Stats/Stats.tsx","components/three/Canvas/Canvas.styled.ts","components/three/Canvas/Canvas.tsx","components/three/Sky/Sky.tsx","components/three/Water/GerstnerWater.tsx","components/three/Water/utils/vertex.shader.js","components/three/Water/utils/fragment.shader.js","pages/Playground/Playground.tsx"],"sourcesContent":["import styled from 'styled-components'\r\n\r\nimport sizes from 'styles/sizes'\r\nimport colors from 'styles/colors'\r\n\r\nexport const Wrapper = styled.div`\r\n  height: calc(100vh - ${sizes.header});\r\n  background-color: ${colors.bg};\r\n\r\n  overflow: hidden;\r\n`","import * as React from 'react';\r\n\r\nimport * as styled from './PageContent.styled'\r\n\r\nconst PageContent: React.FC = ({ children }) => (\r\n  <styled.Wrapper>\r\n    {children}\r\n  </styled.Wrapper>\r\n)\r\n\r\nexport default PageContent","import * as React from 'react'\r\nimport { useThree } from '@react-three/fiber'\r\nimport { OrbitControls } from '@react-three/drei'\r\n\r\nconst Controls: React.FC = ({ children }) => {\r\n  const ref = React.useRef<any>()\r\n  const { camera } = useThree<any>()\r\n\r\n  React.useEffect(() => {\r\n    camera.position.set(-25, 15, -25)\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <OrbitControls\r\n        ref={ref}\r\n\r\n        // Zoom limits\r\n        minDistance={15}\r\n        maxDistance={150}\r\n\r\n        // Disable camera below surface\r\n        maxPolarAngle={Math.PI / 2.5}\r\n      />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Controls","import * as React from 'react'\r\nimport { Stats } from '@react-three/drei'\r\n\r\nconst Statistics: React.FC = () => (<Stats className='stats-wrapper' />)\r\n\r\nexport default Statistics","import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  background-color: #f5f5f5;\r\n`","import * as React from 'react'\r\nimport { Canvas as R3FCanvas } from '@react-three/fiber'\r\n\r\nimport Controls from 'components/three/Controls'\r\nimport Stats from 'components/three/Stats'\r\n\r\nimport * as styled from './Canvas.styled'\r\n\r\nconst Canvas: React.FC = ({ children }) => (\r\n  <styled.Wrapper>\r\n    <R3FCanvas>\r\n      <Controls>\r\n        {children}\r\n      </Controls>\r\n\r\n      <Stats />\r\n    </R3FCanvas>\r\n  </styled.Wrapper>\r\n)\r\n\r\nexport default Canvas\r\n","import { memo } from 'react'\r\nimport { Sky } from '@react-three/drei'\r\n\r\nconst SkyObject = () => {\r\n  return (\r\n    <>\r\n      <Sky\r\n        distance={450000}\r\n        sunPosition={[1000, 1000, 8000]}\r\n        inclination={10}\r\n        turbidity={0.5}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(SkyObject)\r\n","import React, { useRef, useEffect, useMemo, useCallback } from 'react'\r\n\r\nimport * as THREE from 'three'\r\nimport {\r\n  extend,\r\n  useThree,\r\n  useLoader,\r\n  useFrame,\r\n  Object3DNode,\r\n} from '@react-three/fiber'\r\nimport { Water } from 'three/examples/jsm/objects/Water.js'\r\n\r\nimport _ from 'lodash'\r\n\r\nimport vertexShader from './utils/vertex.shader'\r\nimport fragmentShader from './utils/fragment.shader'\r\n\r\nimport { Wave } from 'models/wave.model'\r\n\r\nextend({ Water })\r\n\r\ndeclare global {\r\n  namespace JSX {\r\n    interface IntrinsicElements {\r\n      water: Object3DNode<Water, typeof Water>\r\n    }\r\n  }\r\n}\r\n\r\ninterface Props {\r\n  wireframe: boolean\r\n  size: number\r\n  waveA: Wave\r\n  waveB: Wave\r\n  waveC: Wave\r\n}\r\n\r\nconst GerstnerWater: React.FC<Props> = ({\r\n  wireframe,\r\n  size,\r\n  waveA,\r\n  waveB,\r\n  waveC,\r\n}) => {\r\n  const ref = useRef<Water>()\r\n  const gl = useThree<THREE.WebGLRenderer>((state) => state.gl)\r\n\r\n  const waterNormals = useLoader(\r\n    THREE.TextureLoader,\r\n    require('assets/maps/waternormals.jpg')\r\n  ) as any\r\n  waterNormals.wrapS = waterNormals.wrapT = THREE.RepeatWrapping\r\n\r\n  const onBeforeCompile = useCallback(\r\n    (shader: any) => {\r\n      shader.uniforms.waveA = {\r\n        value: [\r\n          Math.sin((waveA.direction * Math.PI) / 180),\r\n          Math.cos((waveA.direction * Math.PI) / 180),\r\n          waveA.steepness,\r\n          waveA.wavelength,\r\n        ],\r\n      }\r\n\r\n      shader.uniforms.waveB = {\r\n        value: [\r\n          Math.sin((waveB.direction * Math.PI) / 180),\r\n          Math.cos((waveB.direction * Math.PI) / 180),\r\n          waveB.steepness,\r\n          waveB.wavelength,\r\n        ],\r\n      }\r\n\r\n      shader.uniforms.waveC = {\r\n        value: [\r\n          Math.sin((waveC.direction * Math.PI) / 180),\r\n          Math.cos((waveC.direction * Math.PI) / 180),\r\n          waveC.steepness,\r\n          waveC.wavelength,\r\n        ],\r\n      }\r\n\r\n      shader.vertexShader = vertexShader\r\n      shader.fragmentShader = fragmentShader\r\n\r\n      shader.uniforms.size.value = 0\r\n    },\r\n    [waveA, waveB, waveC]\r\n  )\r\n\r\n  // Plane Geometry\r\n  const geometry = useMemo(\r\n    () => new THREE.PlaneGeometry(size, size, size / 4, size / 4),\r\n    [size]\r\n  )\r\n\r\n  // Water Mesh Config\r\n  const config = useMemo(\r\n    () => ({\r\n      textureWidth: 256,\r\n      textureHeight: 256,\r\n      waterNormals,\r\n      sunDirection: new THREE.Vector3(),\r\n      side: THREE.DoubleSide,\r\n      waterColor: '#102E4A',\r\n      sunColor: '#eb8934',\r\n      distortionScale: 8,\r\n      fog: undefined,\r\n      format: gl.outputEncoding,\r\n\r\n      onBeforeCompile,\r\n    }),\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [waterNormals, waveA, waveB, waveC]\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!ref.current) {\r\n      return\r\n    }\r\n\r\n    const material = ref.current.material as THREE.ShaderMaterial\r\n    material.wireframe = wireframe\r\n  }, [size, wireframe, waveA, waveB, waveC])\r\n\r\n  // Animate water\r\n  useFrame((_, delta) => {\r\n    if (!ref.current) {\r\n      return\r\n    }\r\n\r\n    const material = ref.current.material as THREE.ShaderMaterial\r\n    material.uniforms.time.value += delta\r\n    material.onBeforeCompile = onBeforeCompile\r\n  })\r\n\r\n  return (\r\n    <water\r\n      ref={ref}\r\n      args={[geometry, { ...config }]}\r\n      rotation-x={-Math.PI / 2}\r\n      position={[0, 0, 0]}\r\n    />\r\n  )\r\n}\r\n\r\nexport default GerstnerWater\r\n","const shader = `\r\nuniform mat4 textureMatrix;\r\nuniform float time;\r\n\r\nvarying vec4 mirrorCoord;\r\nvarying vec4 worldPosition;\r\n\r\n#include <common>\r\n#include <fog_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n\r\nuniform vec4 waveA;\r\nuniform vec4 waveB;\r\nuniform vec4 waveC;\r\n\r\nvec3 GerstnerWave (vec4 wave, vec3 p) {\r\n    float steepness = wave.z;\r\n    float wavelength = wave.w;\r\n    float k = 2.0 * PI / wavelength;\r\n    float c = sqrt(9.8 / k);\r\n    vec2 d = normalize(wave.xy);\r\n    float f = k * (dot(d, vec2(p.x, p.y)) - c * time);\r\n    float a = steepness / k;\r\n\r\n    return vec3(\r\n        d.x * (a * cos(f)),\r\n        d.y * (a * cos(f)),\r\n        a * sin(f)\r\n    );\r\n}\r\n\r\nvoid main() {\r\n    mirrorCoord = modelMatrix * vec4( position, 1.0 );\r\n    worldPosition = mirrorCoord.xyzw;\r\n    mirrorCoord = textureMatrix * mirrorCoord;\r\n\r\n    vec3 gridPoint = position.xyz;\r\n    vec3 tangent = vec3(1, 0, 0);\r\n    vec3 binormal = vec3(0, 0, 1);\r\n    vec3 p = gridPoint;\r\n    p += GerstnerWave(waveA, gridPoint);\r\n    p += GerstnerWave(waveB, gridPoint);\r\n    p += GerstnerWave(waveC, gridPoint);\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( p.x, p.y, p.z, 1.0);\r\n\r\n    #include <beginnormal_vertex>\r\n    #include <defaultnormal_vertex>\r\n    #include <logdepthbuf_vertex>\r\n    #include <fog_vertex>\r\n    #include <shadowmap_vertex>\r\n}\r\n`\r\n\r\nexport default shader\r\n","const shader = `\r\nuniform sampler2D mirrorSampler;\r\nuniform float alpha;\r\nuniform float time;\r\nuniform float size;\r\nuniform float distortionScale;\r\nuniform sampler2D normalSampler;\r\nuniform vec3 sunColor;\r\nuniform vec3 sunDirection;\r\nuniform vec3 eye;\r\nuniform vec3 waterColor;\r\n\r\nvarying vec4 mirrorCoord;\r\nvarying vec4 worldPosition;\r\n\r\nuniform float offsetX;\r\nuniform float offsetZ;\r\n\r\nvec4 getNoise( vec2 uv ) {\r\n    vec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);\r\n    vec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );\r\n    vec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );\r\n    vec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );\r\n    vec4 noise = texture2D( normalSampler, uv0 ) +\r\n        texture2D( normalSampler, uv1 ) +\r\n        texture2D( normalSampler, uv2 ) +\r\n        texture2D( normalSampler, uv3 );\r\n    return noise * 0.5 - 1.0;\r\n}\r\n\r\nvoid sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {\r\n    vec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );\r\n    float direction = max( 0.0, dot( eyeDirection, reflection ) );\r\n    specularColor += pow( direction, shiny ) * sunColor * spec;\r\n    diffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;\r\n}\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <bsdfs>\r\n#include <fog_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <lights_pars_begin>\r\n#include <shadowmap_pars_fragment>\r\n#include <shadowmask_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n    #include <logdepthbuf_fragment>\r\n\r\n    vec4 noise = getNoise( (worldPosition.xz) + vec2(offsetX/12.25,offsetZ/12.25) * size );\r\n    vec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );\r\n\r\n    vec3 diffuseLight = vec3(0.0);\r\n    vec3 specularLight = vec3(0.0);\r\n\r\n    vec3 worldToEye = eye-worldPosition.xyz;\r\n    vec3 eyeDirection = normalize( worldToEye );\r\n    sunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );\r\n\r\n    float distance = length(worldToEye);\r\n\r\n    vec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;\r\n    vec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );\r\n\r\n    float theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );\r\n    float rf0 = 0.3;\r\n    float reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );\r\n    vec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;\r\n    vec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);\r\n    vec3 outgoingLight = albedo;\r\n    gl_FragColor = vec4( outgoingLight, alpha );\r\n\r\n    #include <tonemapping_fragment>\r\n    #include <fog_fragment>\r\n}\r\n`\r\n\r\nexport default shader","import React from 'react'\r\n\r\nimport { useControls } from 'leva'\r\n\r\nimport PageContent from 'components/layout/PageContent'\r\nimport Canvas from 'components/three/Canvas'\r\nimport Sky from 'components/three/Sky'\r\nimport GerstnerWater from 'components/three/Water/GerstnerWater'\r\n\r\nimport { Wave } from 'models/wave.model'\r\n\r\nconst PlaygroundPage: React.FC = () => {\r\n  // Water Controls\r\n  const { wireframe, size } = useControls('Water', {\r\n    size: { label: 'Water Area', value: 512, min: 64, max: 1024, step: 1 },\r\n    wireframe: { label: 'Wireframe', value: false },\r\n  })\r\n\r\n  const waveA: Wave = useControls('Wave A', {\r\n    direction: { label: 'Direction', value: 0, step: 1, min: 0, max: 359 },\r\n    steepness: { label: 'Steepness', value: 0.15, step: 0.01, min: 0, max: 1 },\r\n    wavelength: { label: 'Wave Length', value: 100, step: 1, min: 1, max: 100 },\r\n  })\r\n\r\n  const waveB: Wave = useControls('Wave B', {\r\n    direction: { label: 'Direction', value: 30, step: 1, min: 0, max: 359 },\r\n    steepness: { label: 'Steepness', value: 0.15, step: 0.01, min: 0, max: 1 },\r\n    wavelength: { label: 'Wave Length', value: 50, step: 1, min: 1, max: 100 },\r\n  })\r\n\r\n  const waveC: Wave = useControls('Wave C', {\r\n    direction: { label: 'Direction', value: 60, step: 1, min: 0, max: 359 },\r\n    steepness: { label: 'Steepness', value: 0.15, step: 0.01, min: 0, max: 1 },\r\n    wavelength: { label: 'Wave Length', value: 25, step: 1, min: 1, max: 100 },\r\n  })\r\n\r\n  return (\r\n    <PageContent>\r\n      <Canvas>\r\n        <Sky />\r\n        <GerstnerWater\r\n          waveA={waveA}\r\n          waveB={waveB}\r\n          waveC={waveC}\r\n          wireframe={wireframe}\r\n          size={size}\r\n        />\r\n      </Canvas>\r\n    </PageContent>\r\n  )\r\n}\r\n\r\nexport default PlaygroundPage\r\n"],"names":["Wrapper","styled","sizes","colors","children","ref","React","camera","useThree","position","set","OrbitControls","minDistance","maxDistance","maxPolarAngle","Math","PI","Stats","className","SkyObject","Sky","distance","sunPosition","inclination","turbidity","memo","extend","Water","wireframe","size","waveA","waveB","waveC","useRef","gl","state","waterNormals","useLoader","THREE","require","wrapS","wrapT","onBeforeCompile","useCallback","shader","uniforms","value","sin","direction","cos","steepness","wavelength","vertexShader","fragmentShader","geometry","useMemo","config","textureWidth","textureHeight","sunDirection","side","waterColor","sunColor","distortionScale","fog","undefined","format","outputEncoding","useEffect","current","material","useFrame","_","delta","time","args","useControls","label","min","max","step"],"sourceRoot":""}